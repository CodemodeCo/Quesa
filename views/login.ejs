<!DOCTYPE html>
<html>
  <head>
    <title>Quesa - Login</title>
      <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://fonts.googleapis.com/css?family=Berkshire+Swash" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Lato:300" rel="stylesheet">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
  <style>
    canvas{
              border: 1px solid black;
              position:fixed;
              top:0;
              left:0;
              bottom:0;
              right:0;
              z-index: -1;
              background: rgb(255 , 25, 36);
           }
    </style>
    <link rel='stylesheet' href='/stylesheets/login.css' />
    <link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	<!-- Import materialize.css -->
	  <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.0/css/materialize.min.css" rel="stylesheet">
  </head>
  <body>
    <a class="btn-floating btn-large waves-effect waves-light red tooltipped" data-position="top" data-delay="50" data-tooltip="Know about Quesa"  style="position: fixed; bottom: 20px; right: 20px;" onclick="openMaterialize();"><i class="material-icons">remove_red_eye</i></a>
    <canvas id="canvas"></canvas>
    <div id="app"></div>
    <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
	  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.0/js/materialize.min.js"></script>
    <script src="./build/login.bundle.js"></script>
    <script type="text/javascript"> 
    
       
        function showLoadingIcon(){
            console.log('showing icon')
            document.getElementById('s_submit').innerHTML= '';
            $('#s_loading').addClass('show')
            $('#s_loading').removeClass('hide')
            document.getElementById('l_submit').innerHTML= '';
            $('#l_loading').addClass('show')
            $('#l_loading').removeClass('hide')
        }
        function hideLoadingIcon(){
            $("#s_loading").removeClass('show')
            $('#s_loading').addClass('hide');
            $("#l_loading").removeClass('show')
            $('#l_loading').addClass('hide');
            document.getElementById('s_submit').innerHTML="<i class='material-icons'>check_circle</i>"
            document.getElementById('l_submit').innerHTML="<i class='material-icons'>check_circle</i>"
        }
       function createToast(text){
           Materialize.toast(text,3000);
       }
        function openMaterialize(){
                Materialize.toast('Welcome to Quesa - Forum for Codemode students.<br>Please sign up to get access to our 24/7 active chat room.<br> Ask any  kind of question you have related to your course,<br> and get response within minutes, or even - seconds!',7000)
        }
        let canvas = document.querySelector('canvas');
          let context = canvas.getContext('2d');
          canvas.height = window.innerHeight;
          canvas.width = window.innerWidth;

          window.addEventListener('resize', function(){
            canvas.height = window.innerHeight;
            canvas.width = window.innerWidth;    
            canvasProps.height = window.innerHeight;
            canvasProps.width = window.innerWidth      
          })

          let canvasProps = {
              height: canvas.clientHeight,
              width: canvas.clientWidth
          }
          let cursorProps = {
              _xPos : null,
              _yPos : null
          }
          window.addEventListener('mousemove', function(event){
              cursorProps._xPos = event.clientX;
              cursorProps._yPos = event.clientY;
          })

          let Ball = function(_color, _radius, _x, _y, _speedX, _speedY){
              this.color = _color;
              this.originalRadius = _radius;
              this.radius = _radius;
              this.x = _x;
              this.y = _y;
              this.speedX = _speedX;
              this.speedY = _speedY;

              this.update = function(_speedX, _speedY){
                  if(this.x + this.radius >= canvasProps.width || this.x - this.radius <= 0){
                      this.speedX = -this.speedX
                  }
                  if(this.y + this.radius >= canvasProps.height || this.y - this.radius <= 0){
                      this.speedY = -this.speedY;
                  }

                  this.x = this.x + this.speedX;
                  this.y = this.y + this.speedY;
                  this.draw();
              }
              
              this.draw = function(){
                  context.beginPath();
                  context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                  context.fillStyle = this.color;
                  context.fill();
              }
          }
          let _randomColorGenerator = () => {
              return 'rgba(255,255,255,1)'
          }

          //Random Radius generator for balls;

          let _randomRadiusGenerator = () =>{
              return 2;
          }

          //Generate random numbers in range

          let _randomRangeGenerator = (_max) => {
              return Math.random() * (_max - 65) + 35;
          }

          // Get random speed for balls 0 = dx, 1 = dy

          let _randomSpeedGenerator = (number) => {
              if(number == 0){
                  return (Math.random()*4) - 2.0;
              }else if(number == 1){
                  return (Math.random()*4) - 2.0;
              }else{
                  console.log("Sorry, only values 1 and 0 accepted for x and y speeds");
              }
          }

          //Random X & Y co-ordinate generator 0 = x, 1 = y
          let _randomCordinateGenerator = (number) => {
              if(number == 0){
                  return _randomRangeGenerator(canvasProps.width)
              }else if(number == 1){
                  return _randomRangeGenerator(canvasProps.height)
              }else{
                  console.log("Sorry, only values 1 and 0 accepted for x and y co-ordinate");
              }
          }

          let BallArray = [];

          for(let index = 0; index <105; index++){
              BallArray.push(new Ball(_randomColorGenerator(),
                                      _randomRadiusGenerator(),
                                      _randomCordinateGenerator(0),
                                      _randomCordinateGenerator(1),
                                      _randomSpeedGenerator(0),
                                      _randomSpeedGenerator(1)
                                  ));
          }

          //Function to draw all lines to connect each and every ball with mouse position

          let drawLines = () => {
              for(let _outer = 0; _outer < BallArray.length; _outer++){
                  let _curr = BallArray[_outer];
                  for(let _inner = 0; _inner < BallArray.length; _inner++){
                      let _target = BallArray[_inner];
                      if(Math.abs(_curr.x - _target.x) <= 70 && Math.abs(_curr.y - _target.y) <= 70 ){
                          context.beginPath();
                          context.moveTo(_curr.x, _curr.y);
                          context.lineTo(_target.x, _target.y);
                          context.strokeStyle='white';
                          context.lineWidth=0.3;
                          context.stroke();
                      }
                  }
              }
              // if(cursorProps._xPos == null || cursorProps._yPos == null){
              //     return;
              // }
                  for(let innerIndex = 0; innerIndex < BallArray.length; innerIndex++){
                      if(Math.abs(cursorProps._xPos - BallArray[innerIndex].x) <= 200 && Math.abs(cursorProps._yPos - BallArray[innerIndex].y) <= 200){
                          context.beginPath();
                          context.moveTo(cursorProps._xPos, cursorProps._yPos);
                          context.lineTo(BallArray[innerIndex].x, BallArray[innerIndex].y);
                          context.strokeStyle='white';
                          context.lineWidth=0.3;
                          context.stroke();
                      }
                  }
          }

          let animate = () => {
              requestAnimationFrame(animate);
              context.clearRect(0,0, canvas.clientWidth, canvas.clientHeight);

              for(var index = 0; index < BallArray.length; index++){
                  BallArray[index].update();
              }
          drawLines();

          }
          animate();
    </script>
  </body>
</html>
